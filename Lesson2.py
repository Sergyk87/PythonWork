#Коллекции данных

list_1 = []  #создаем пустой список
list_1 = list()  #создаем пустой список через функцию
list_1 = [1, 2, 3, 5, 8]  #создаем список со значениями
print(list_1)  #print(*list_1)  если поставить звездочку, то уберутся скобки при выводе на печать

for i in list_1:  #можем использовать цикл в списке, можем поочередно выводить значения на печать
    print(i)

print(len(list_1))  #вывести кол-во элементов

print(list_1[0])  #Вывести на печать элемент по индексу(начинается с нуля). Если поставить -1, то индексация будет начинаться с конца.

list_1 = [1, 5]
print(list_1)               #[1, 5]    было
list_1.append(8)            # добавление в конец списка
print(list_1)               #[1, 5, 8] стало

list_1 = []               # []
print(list_1)             # [0, 1]
for i in range(5):        # [0, 1, 2]
    list_1.append(i)      # [0, 1, 2, 3]
    print(list_1)         # [0, 1, 2, 3, 4]

list_1 = [1, 4, 43, 12, 9]
print(list_1.pop())  # Удаление последнего элемента из списка
print(list_1)        # [1, 4, 43, 12]
# Не только удаляет последний элемент, но и возвращает. Например можно задать переменную последним элементом : a = print(list_1.pop())

list_1 = [1, 4, 43, 12, 9]
print(list_1.pop(0)) # Удаление конкретного элемента по индексу. Например убираем элемент с индексом 0: 1 [4, 43, 12, 9]
print(list_1)

list_1 = [12, 7, -1, 21, 0]   # добавление элемента на нужную позицию
print(list_1.insert(2, 11))   # Функция "инзерт" имеет два аргумента: первый - на какую позицию добавить элемент, второй - значение элемента
print(list_1)                 # [12, 7, 11, -1, 21, 0] стало

# Срезы в списках
list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(list_1[0])               #  вывод первого элемента 1
print(list_1[1])               #  вывод второго элкмента 2
print(list_1[len(list_1)-1])   #  вывод последнего элемента 10
print(list_1[-5])              #  вывод пятого элемента с конца 6
print(list_1[:])               #  вывод от первого до последнего [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(list_1[:2])              #  вывод от первого до второго(не включая второй) [1, 2]
print(list_1[len(list_1)-2:])  #  вывод двух последних элементов [9, 10]
print(list_1[2:9])             #  вывод интервала от 2(включительно) до 9(не включительно) [3, 4, 5, 6, 7, 8, 9]
print(list_1[6:-18])           #  []
print(list_1[0:len(list_1):6]) #  с начала до конца с шагом 6 [1, 7]
print(list_1[::6])             #  с начала до конца с шагом 6 [1, 7]

# КОРТЕЖ
# Кортеж - это неизменяемый список. Он занимает менбше места в памяти и работает быстрее, по сравнению со списками. Кортеж нужен для защиты данных от изменений.
t = () # Создаем пустой кортеж
print(type(t))  # смотрим какой тип
t =(1, 2, 5, 3)          # присваиваем значение
print(type(t))  # смотрим какой тип

# Преобразование списка в кортеж
v = [1, 8, 9]
print(v)          # [1, 8, 9]
print(type(v))    # <class 'list'>

v = tuple(v)  # преобразовываем список в кортеж
print(v)          # (1, 8, 9)
print(type(v))    # <class 'tuple'>

# a, b = 1, 2 - множественное присваивание
# a = b = 1

a, b, c = v
print(a, b, c) # Присваиваем значения переменным из кортежа

t = (1, 3, 2, 5)
for i in t:
    print(i)
# ИЛИ
t = (1, 3, 2, 5)
for i in range(len(t)):
    print(t[i])

# СЛОВАРИ
# Словари - это неупорядоченные коллекции произвольных объектов с доступом по ключу. В списках в качестве ключа используется индекс элемента.
# В словаре для определения элемента изпользуется значение ключа(строка, число)

d = {}      # создание пустого словаря
d = dict()  # создание пустого словаря

d['q'] = 'qwerty'  # Добавляем в словарь значение 'qwerty' по ключу q : {'q': 'qwerty'}
print(d)

d['w'] = 'werty'   # Добавляем в словарь значение 'qwerty' по ключу q : {'q': 'qwerty', 'w': 'werty'}
print(d)

d['e'] = 'erty'   
print(d)

print(d['w'])  #  вывод на печать элемента по ключу :  werty

dictionary = {}
dictionary = {'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}
print(dictionary) # {'up':'↑', 'left':'←', 'down':'↓', 'right':'→'}
print(dictionary['left']) # ← типы ключей могут отличаться/ выводим по ключу, печатается только стрелочка
print(dictionary['up']) # ↑ типы ключей могут отличаться/ выводим по ключу, печатается только стрелочка
dictionary['left'] = '⇐'
print(dictionary['left']) # ⇐
#print(dictionary['type']) # KeyError: 'type'
del dictionary['left'] # удаление элемента
for item in dictionary: # for (k,v) in dictionary.items():
    print('{}: {}'.format(item, dictionary[item]))
# up: ↑
# down: ↓
# right: →
print(dictionary.items()) # dict_items([('up', '↑'), ('down', '↓'), ('right', '→')]) - выводится список где каждый элемент является кортежем в к-м 1 элемент - ключ, 1 - значение

# МНОЖЕСТВА
# Множества содержат в себе уникальные элементы, не обязательно упорядоченные.
# Одно множество может содержать значения любых типов. Если у Вас есть два множества,
# Вы можете совершать над ними любые стандартные операции, например, объединение,
# пересечение и разность. Давайте разберем их.
colors = {'red', 'green', 'blue'}
print(colors) # {'red', 'green', 'blue'}
colors.add('red') # не добавится, т.к. не уникально
print(colors) # {'red', 'green', 'blue'}
colors.add('gray')  # добавление значение
print(colors) # {'red', 'green', 'blue','gray'}
colors.remove('red') # удаление значения
print(colors) # {'green', 'blue','gray'}
#colors.remove('red') # KeyError: 'red'
colors.discard('red') # ok проверяет есть ли элемент
print(colors) # {'green', 'blue','gray'}
colors.clear() # { } удаление всех элементов
print(colors) # set()

q = set()  # создание пустого множества

#Операции со множествами в Python:
a = {1, 2, 3, 5, 8}
b = {2, 5, 8, 13, 21}
c = a.copy() # c = {1, 2, 3, 5, 8}
u = a.union(b) # u = {1, 2, 3, 5, 8, 13, 21} объединение двух множеств(оставляет только уникальные элементы)
i = a.intersection(b) # i = {8, 2, 5} показывает только общие элементы
dl = a.difference(b) # dl = {1, 3} из множества a вычитаем множество b
dr = b.difference(a) # dr = {13, 21} из множества b вычитаем множество a
q = a.union(b).difference(a.intersection(b))# {1, 21, 3, 13}

# Неизменяемое или замороженное множество(frozenset) — множество, с которым не будут
# работать методы удаления и добавления.
a = {1, 2, 3, 5, 8}
b = frozenset(a)
print(b) # frozenset({1, 2, 3, 5, 8})

# Создать список, состоящий из четных чисел в диапазоне от 1 до 100.
# Решение:
# 1. Создать список чисел от 1 до 100
list_1 = []
for i in range(1, 101):
    list_1.append(i)
print(list_1) # [1, 2, 3,..., 100]
# Эту же функцию можно записать так:
list_1 = [i for i in range(1, 101)] # [1, 2, 3,..., 100]
